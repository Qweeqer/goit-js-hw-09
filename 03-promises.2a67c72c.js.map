{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAM+E,SAAtEC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,MAEpBA,MAuBsC,SAApCO,GAAQR,SAAEA,EAAQC,MAAEA,IAC3BJ,EAAAY,OAAOC,QAAQ,sBAAoBV,QAAiBC,OAIT,SAApCU,GAAUX,SAAEA,EAAQC,MAAEA,IAC7BJ,EAAAY,OAAOG,QAAQ,uBAAqBZ,QAAiBC,OAzCvCY,SAASC,cAAc,SA6C/BC,iBAAiB,UA5BQ,SAAfC,GAChBA,EAAMC,iBACN,MAAMC,EAAOF,EAAMG,cACbC,EAAW,IAAIC,SAASH,GACxBI,EAAY,GAClB,IAAK,MAAOC,EAAKC,KAAUJ,EAASK,UAClCH,EAAUC,GAAOG,OAAOF,GAGdN,EAAPS,QAE+B,IAA/B,IAAI3B,EAAW,EAAGA,GAAYsB,EAAUM,OAAQ5B,GAAY,EAC/DD,EAAcC,EAAUsB,EAAUrB,OAAO4B,KAAKlB,GAAWmB,MAAMtB,GAC/Dc,EAAUrB,MAAQqB,EAAUrB,MAAQqB,EAAUS","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// Получаем ссылку на форму (чтобы повесить слушателя)\nconst formRef = document.querySelector('.form');\n\n// Функция для создания промиса, принимает два параметра: номер создаваемого промиса (position) и задержку (delay)\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay })\n      } else {\n        reject({ position, delay })\n      }\n    }, delay);\n  });\n};\n  \n// Функция-колбек вызываемая при событии submit\nfunction onSubmit(event) {\n  event.preventDefault();\n  const form = event.currentTarget;\n  const dataForm = new FormData(form);\n  const finalData = {};\n  for (const [key, value] of dataForm.entries()) {\n    finalData[key] = Number(value);\n  }\n  // очищаем форму\n  form.reset();\n  // в цикле for вызываем функцию создающую промис\n  for (let position = 1; position <= finalData.amount; position += 1){\n    createPromise(position, finalData.delay).then(onSuccess).catch(onError);\n    finalData.delay = finalData.delay + finalData.step;\n  };\n};\n\n// Функция вызываемая методом catch, когда промис возвращает reject\nfunction onError({ position, delay }) {\n  Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n};\n\n// Функция вызываемая методом then, когда промис возвращает resolve\nfunction onSuccess({ position, delay }) {\n  Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n};\n\n// Вешаем слушателя на форму по событию submit\nformRef.addEventListener('submit', onSubmit);"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","$47d4ff9957288465$var$onError","Notify","failure","$47d4ff9957288465$var$onSuccess","success","document","querySelector","addEventListener","event","preventDefault","form","currentTarget","dataForm","FormData","finalData","key","value","entries","Number","reset","amount","then","catch","step"],"version":3,"file":"03-promises.2a67c72c.js.map"}